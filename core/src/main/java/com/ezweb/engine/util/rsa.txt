1.>> You will need BouncyCastle:

import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.util.io.pem.PemObject;
import org.bouncycastle.util.io.pem.PemWriter;

The code snippets below have been checked and found working with Bouncy Castle 1.52.

1.1 >> Private key
 A: >> Convert private key from PKCS#8 to PKCS#1:

	PrivateKey priv = pair.getPrivate();
	byte[] privBytes = priv.getEncoded();

	PrivateKeyInfo pkInfo = PrivateKeyInfo.getInstance(privBytes);
	ASN1Encodable encodable = pkInfo.parsePrivateKey();
	ASN1Primitive primitive = encodable.toASN1Primitive();
	byte[] privateKeyPKCS1 = primitive.getEncoded();

	PemObject pemObject = new PemObject("RSA PRIVATE KEY", privateKeyPKCS1);
	StringWriter stringWriter = new StringWriter();
	PemWriter pemWriter = new PemWriter(stringWriter);
	pemWriter.writeObject(pemObject);
	pemWriter.close();
	String pemString = stringWriter.toString();

Check with command line OpenSSL that the key format is as expected:
	$ openssl rsa -in rsa_private_key.pem -noout -text


1.2 >> Public key

 A: >> Convert public key from X.509 SubjectPublicKeyInfo to PKCS#1:

	PublicKey pub = pair.getPublic();
	byte[] pubBytes = pub.getEncoded();

	SubjectPublicKeyInfo spkInfo = SubjectPublicKeyInfo.getInstance(pubBytes);
	ASN1Primitive primitive = spkInfo.parsePublicKey();
	byte[] publicKeyPKCS1 = primitive.getEncoded();

	PemObject pemObject = new PemObject("RSA PUBLIC KEY", publicKeyPKCS1);
	StringWriter stringWriter = new StringWriter();
	PemWriter pemWriter = new PemWriter(stringWriter);
	pemWriter.writeObject(pemObject);
	pemWriter.close();
	String pemString = stringWriter.toString();

Check with command line OpenSSL that the key format is as expected:
	$ openssl rsa -in rsa_public_key.pem -RSAPublicKey_in -noout -text

========================================================================================================================
1). RSA Public Key file (PKCS#1)

The RSA Public key PEM file is specific for RSA keys.

It starts and ends with the tags:
		-----BEGIN RSA PUBLIC KEY-----
		BASE64 ENCODED DATA
		-----END RSA PUBLIC KEY-----
Within the base64 encoded data the following DER structure is present:

		RSAPublicKey ::= SEQUENCE {
		    modulus           INTEGER,  -- n
		    publicExponent    INTEGER   -- e
		}

========================================================================================================================
2). Public Key file (PKCS#8)
Because RSA is not used exclusively inside X509 and SSL/TLS, a more generic key format is available in the form of PKCS#8,
that identifies the type of public key and contains the relevant data.

It starts and ends with the tags:
		-----BEGIN PUBLIC KEY-----
		BASE64 ENCODED DATA
		-----END PUBLIC KEY-----
Within the base64 encoded data the following DER structure is present:

		PublicKeyInfo ::= SEQUENCE {
		  algorithm       AlgorithmIdentifier,
		  PublicKey       BIT STRING
		}

		AlgorithmIdentifier ::= SEQUENCE {
		  algorithm       OBJECT IDENTIFIER,
		  parameters      ANY DEFINED BY algorithm OPTIONAL
		}
So for an RSA public key, the OID is 1.2.840.113549.1.1.1 and there is a RSAPublicKey as the PublicKey key data bitstring.

========================================================================================================================
4). RSA Private Key file (PKCS#1)

$ openssl genrsa -out private.pem 1024

##  pkcs#8 转为 pkcs#1
$ openssl pkcs8 -in pkcs8.pem -nocrypt -out pkcs1.pem

The RSA private key PEM file is specific for RSA keys.

It starts and ends with the tags:
		-----BEGIN RSA PRIVATE KEY-----
		BASE64 ENCODED DATA
		-----END RSA PRIVATE KEY-----
Within the base64 encoded data the following DER structure is present:

		RSAPrivateKey ::= SEQUENCE {
		  version           Version,
		  modulus           INTEGER,  -- n
		  publicExponent    INTEGER,  -- e
		  privateExponent   INTEGER,  -- d
		  prime1            INTEGER,  -- p
		  prime2            INTEGER,  -- q
		  exponent1         INTEGER,  -- d mod (p-1)
		  exponent2         INTEGER,  -- d mod (q-1)
		  coefficient       INTEGER,  -- (inverse of q) mod p
		  otherPrimeInfos   OtherPrimeInfos OPTIONAL
		}

========================================================================================================================
4). Private Key file (PKCS#8)
##  pkcs#8 转为 pkcs#1
$ openssl pkcs8 -topk8 -inform PEM -in private.pem -outform pem -nocrypt -out pkcs8.pem

Because RSA is not used exclusively inside X509 and SSL/TLS, a more generic key format is available in the form of PKCS#8,
that identifies the type of private key and contains the relevant data.
The unencrypted PKCS#8 encoded data starts and ends with the tags:

		-----BEGIN PRIVATE KEY-----
		BASE64 ENCODED DATA
		-----END PRIVATE KEY-----
Within the base64 encoded data the following DER structure is present:

		PrivateKeyInfo ::= SEQUENCE {
		  version         Version,
		  algorithm       AlgorithmIdentifier,
		  PrivateKey      BIT STRING
		}

		AlgorithmIdentifier ::= SEQUENCE {
		  algorithm       OBJECT IDENTIFIER,
		  parameters      ANY DEFINED BY algorithm OPTIONAL
		}
So for an RSA private key, the OID is 1.2.840.113549.1.1.1 and there is a RSAPrivateKey as the PrivateKey key data bitstring.
